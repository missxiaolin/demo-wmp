{"version":3,"sources":["index.js","jasmineUtils.js","utils.js","immutableUtils.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _exportNames = {\n  equals: true,\n  isA: true\n};\nObject.defineProperty(exports, 'equals', {\n  enumerable: true,\n  get: function () {\n    return _jasmineUtils.equals;\n  }\n});\nObject.defineProperty(exports, 'isA', {\n  enumerable: true,\n  get: function () {\n    return _jasmineUtils.isA;\n  }\n});\nvar _jasmineUtils = require('./jasmineUtils');\nvar _utils = require('./utils');\nObject.keys(_utils).forEach(function (key) {\n  if (key === 'default' || key === '__esModule') return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _utils[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _utils[key];\n    }\n  });\n});\n","\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.equals = void 0;\nexports.isA = isA;\n/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n// Extracted out of jasmine 2.5.2\nconst equals = (a, b, customTesters, strictCheck) => {\n  customTesters = customTesters || [];\n  return eq(a, b, [], [], customTesters, strictCheck);\n};\nexports.equals = equals;\nfunction isAsymmetric(obj) {\n  return !!obj && isA('Function', obj.asymmetricMatch);\n}\nfunction asymmetricMatch(a, b) {\n  const asymmetricA = isAsymmetric(a);\n  const asymmetricB = isAsymmetric(b);\n  if (asymmetricA && asymmetricB) {\n    return undefined;\n  }\n  if (asymmetricA) {\n    return a.asymmetricMatch(b);\n  }\n  if (asymmetricB) {\n    return b.asymmetricMatch(a);\n  }\n}\n\n// Equality function lovingly adapted from isEqual in\n//   [Underscore](http://underscorejs.org)\nfunction eq(a, b, aStack, bStack, customTesters, strictCheck) {\n  let result = true;\n  const asymmetricResult = asymmetricMatch(a, b);\n  if (asymmetricResult !== undefined) {\n    return asymmetricResult;\n  }\n  const testerContext = {\n    equals\n  };\n  for (let i = 0; i < customTesters.length; i++) {\n    const customTesterResult = customTesters[i].call(\n      testerContext,\n      a,\n      b,\n      customTesters\n    );\n    if (customTesterResult !== undefined) {\n      return customTesterResult;\n    }\n  }\n  if (a instanceof Error && b instanceof Error) {\n    return a.message == b.message;\n  }\n  if (Object.is(a, b)) {\n    return true;\n  }\n  // A strict comparison is necessary because `null == undefined`.\n  if (a === null || b === null) {\n    return a === b;\n  }\n  const className = Object.prototype.toString.call(a);\n  if (className != Object.prototype.toString.call(b)) {\n    return false;\n  }\n  switch (className) {\n    case '[object Boolean]':\n    case '[object String]':\n    case '[object Number]':\n      if (typeof a !== typeof b) {\n        // One is a primitive, one a `new Primitive()`\n        return false;\n      } else if (typeof a !== 'object' && typeof b !== 'object') {\n        // both are proper primitives\n        return Object.is(a, b);\n      } else {\n        // both are `new Primitive()`s\n        return Object.is(a.valueOf(), b.valueOf());\n      }\n    case '[object Date]':\n      // Coerce dates to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a == +b;\n    // RegExps are compared by their source patterns and flags.\n    case '[object RegExp]':\n      return a.source === b.source && a.flags === b.flags;\n  }\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return false;\n  }\n\n  // Use DOM3 method isEqualNode (IE>=9)\n  if (isDomNode(a) && isDomNode(b)) {\n    return a.isEqualNode(b);\n  }\n\n  // Used to detect circular references.\n  let length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    // circular references at same depth are equal\n    // circular reference is not equal to non-circular one\n    if (aStack[length] === a) {\n      return bStack[length] === b;\n    } else if (bStack[length] === b) {\n      return false;\n    }\n  }\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n  // Recursively compare objects and arrays.\n  // Compare array lengths to determine if a deep comparison is necessary.\n  if (strictCheck && className == '[object Array]' && a.length !== b.length) {\n    return false;\n  }\n\n  // Deep compare objects.\n  const aKeys = keys(a, hasKey);\n  let key;\n  const bKeys = keys(b, hasKey);\n  // Add keys corresponding to asymmetric matchers if they miss in non strict check mode\n  if (!strictCheck) {\n    for (let index = 0; index !== bKeys.length; ++index) {\n      key = bKeys[index];\n      if ((isAsymmetric(b[key]) || b[key] === undefined) && !hasKey(a, key)) {\n        aKeys.push(key);\n      }\n    }\n    for (let index = 0; index !== aKeys.length; ++index) {\n      key = aKeys[index];\n      if ((isAsymmetric(a[key]) || a[key] === undefined) && !hasKey(b, key)) {\n        bKeys.push(key);\n      }\n    }\n  }\n\n  // Ensure that both objects contain the same number of properties before comparing deep equality.\n  let size = aKeys.length;\n  if (bKeys.length !== size) {\n    return false;\n  }\n  while (size--) {\n    key = aKeys[size];\n\n    // Deep compare each member\n    if (strictCheck)\n      result =\n        hasKey(b, key) &&\n        eq(a[key], b[key], aStack, bStack, customTesters, strictCheck);\n    else\n      result =\n        (hasKey(b, key) || isAsymmetric(a[key]) || a[key] === undefined) &&\n        eq(a[key], b[key], aStack, bStack, customTesters, strictCheck);\n    if (!result) {\n      return false;\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return result;\n}\nfunction keys(obj, hasKey) {\n  const keys = [];\n  for (const key in obj) {\n    if (hasKey(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys.concat(\n    Object.getOwnPropertySymbols(obj).filter(\n      symbol => Object.getOwnPropertyDescriptor(obj, symbol).enumerable\n    )\n  );\n}\nfunction hasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction isA(typeName, value) {\n  return Object.prototype.toString.apply(value) === `[object ${typeName}]`;\n}\nfunction isDomNode(obj) {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    typeof obj.nodeType === 'number' &&\n    typeof obj.nodeName === 'string' &&\n    typeof obj.isEqualNode === 'function'\n  );\n}\n","\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.arrayBufferEquality = void 0;\nexports.emptyObject = emptyObject;\nexports.typeEquality =\n  exports.subsetEquality =\n  exports.sparseArrayEquality =\n  exports.pathAsArray =\n  exports.partition =\n  exports.iterableEquality =\n  exports.isOneline =\n  exports.isError =\n  exports.getPath =\n  exports.getObjectSubset =\n    void 0;\nvar _jestGetType = require('jest-get-type');\nvar _immutableUtils = require('./immutableUtils');\nvar _jasmineUtils = require('./jasmineUtils');\nvar Symbol = globalThis['jest-symbol-do-not-touch'] || globalThis.Symbol;\n/**\n * Checks if `hasOwnProperty(object, key)` up the prototype chain, stopping at `Object.prototype`.\n */\nconst hasPropertyInObject = (object, key) => {\n  const shouldTerminate =\n    !object || typeof object !== 'object' || object === Object.prototype;\n  if (shouldTerminate) {\n    return false;\n  }\n  return (\n    Object.prototype.hasOwnProperty.call(object, key) ||\n    hasPropertyInObject(Object.getPrototypeOf(object), key)\n  );\n};\n\n// Retrieves an object's keys for evaluation by getObjectSubset.  This evaluates\n// the prototype chain for string keys but not for symbols.  (Otherwise, it\n// could find values such as a Set or Map's Symbol.toStringTag, with unexpected\n// results.)\nconst getObjectKeys = object => [\n  ...Object.keys(object),\n  ...Object.getOwnPropertySymbols(object)\n];\nconst getPath = (object, propertyPath) => {\n  if (!Array.isArray(propertyPath)) {\n    propertyPath = pathAsArray(propertyPath);\n  }\n  if (propertyPath.length) {\n    const lastProp = propertyPath.length === 1;\n    const prop = propertyPath[0];\n    const newObject = object[prop];\n    if (!lastProp && (newObject === null || newObject === undefined)) {\n      // This is not the last prop in the chain. If we keep recursing it will\n      // hit a `can't access property X of undefined | null`. At this point we\n      // know that the chain has broken and we can return right away.\n      return {\n        hasEndProp: false,\n        lastTraversedObject: object,\n        traversedPath: []\n      };\n    }\n    const result = getPath(newObject, propertyPath.slice(1));\n    if (result.lastTraversedObject === null) {\n      result.lastTraversedObject = object;\n    }\n    result.traversedPath.unshift(prop);\n    if (lastProp) {\n      // Does object have the property with an undefined value?\n      // Although primitive values support bracket notation (above)\n      // they would throw TypeError for in operator (below).\n      result.endPropIsDefined =\n        !(0, _jestGetType.isPrimitive)(object) && prop in object;\n      result.hasEndProp = newObject !== undefined || result.endPropIsDefined;\n      if (!result.hasEndProp) {\n        result.traversedPath.shift();\n      }\n    }\n    return result;\n  }\n  return {\n    lastTraversedObject: null,\n    traversedPath: [],\n    value: object\n  };\n};\n\n// Strip properties from object that are not present in the subset. Useful for\n// printing the diff for toMatchObject() without adding unrelated noise.\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nexports.getPath = getPath;\nconst getObjectSubset = (\n  object,\n  subset,\n  customTesters = [],\n  seenReferences = new WeakMap()\n) => {\n  /* eslint-enable @typescript-eslint/explicit-module-boundary-types */\n  if (Array.isArray(object)) {\n    if (Array.isArray(subset) && subset.length === object.length) {\n      // The map method returns correct subclass of subset.\n      return subset.map((sub, i) =>\n        getObjectSubset(object[i], sub, customTesters)\n      );\n    }\n  } else if (object instanceof Date) {\n    return object;\n  } else if (isObject(object) && isObject(subset)) {\n    if (\n      (0, _jasmineUtils.equals)(object, subset, [\n        ...customTesters,\n        iterableEquality,\n        subsetEquality\n      ])\n    ) {\n      // Avoid unnecessary copy which might return Object instead of subclass.\n      return subset;\n    }\n    const trimmed = {};\n    seenReferences.set(object, trimmed);\n    getObjectKeys(object)\n      .filter(key => hasPropertyInObject(subset, key))\n      .forEach(key => {\n        trimmed[key] = seenReferences.has(object[key])\n          ? seenReferences.get(object[key])\n          : getObjectSubset(\n              object[key],\n              subset[key],\n              customTesters,\n              seenReferences\n            );\n      });\n    if (getObjectKeys(trimmed).length > 0) {\n      return trimmed;\n    }\n  }\n  return object;\n};\nexports.getObjectSubset = getObjectSubset;\nconst IteratorSymbol = Symbol.iterator;\nconst hasIterator = object => !!(object != null && object[IteratorSymbol]);\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nconst iterableEquality = (\n  a,\n  b,\n  customTesters = [] /* eslint-enable @typescript-eslint/explicit-module-boundary-types */,\n  aStack = [],\n  bStack = []\n) => {\n  if (\n    typeof a !== 'object' ||\n    typeof b !== 'object' ||\n    Array.isArray(a) ||\n    Array.isArray(b) ||\n    !hasIterator(a) ||\n    !hasIterator(b)\n  ) {\n    return undefined;\n  }\n  if (a.constructor !== b.constructor) {\n    return false;\n  }\n  let length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    // circular references at same depth are equal\n    // circular reference is not equal to non-circular one\n    if (aStack[length] === a) {\n      return bStack[length] === b;\n    }\n  }\n  aStack.push(a);\n  bStack.push(b);\n  const iterableEqualityWithStack = (a, b) =>\n    iterableEquality(\n      a,\n      b,\n      [...filteredCustomTesters],\n      [...aStack],\n      [...bStack]\n    );\n\n  // Replace any instance of iterableEquality with the new\n  // iterableEqualityWithStack so we can do circular detection\n  const filteredCustomTesters = [\n    ...customTesters.filter(t => t !== iterableEquality),\n    iterableEqualityWithStack\n  ];\n  if (a.size !== undefined) {\n    if (a.size !== b.size) {\n      return false;\n    } else if (\n      (0, _jasmineUtils.isA)('Set', a) ||\n      (0, _immutableUtils.isImmutableUnorderedSet)(a)\n    ) {\n      let allFound = true;\n      for (const aValue of a) {\n        if (!b.has(aValue)) {\n          let has = false;\n          for (const bValue of b) {\n            const isEqual = (0, _jasmineUtils.equals)(\n              aValue,\n              bValue,\n              filteredCustomTesters\n            );\n            if (isEqual === true) {\n              has = true;\n            }\n          }\n          if (has === false) {\n            allFound = false;\n            break;\n          }\n        }\n      }\n      // Remove the first value from the stack of traversed values.\n      aStack.pop();\n      bStack.pop();\n      return allFound;\n    } else if (\n      (0, _jasmineUtils.isA)('Map', a) ||\n      (0, _immutableUtils.isImmutableUnorderedKeyed)(a)\n    ) {\n      let allFound = true;\n      for (const aEntry of a) {\n        if (\n          !b.has(aEntry[0]) ||\n          !(0, _jasmineUtils.equals)(\n            aEntry[1],\n            b.get(aEntry[0]),\n            filteredCustomTesters\n          )\n        ) {\n          let has = false;\n          for (const bEntry of b) {\n            const matchedKey = (0, _jasmineUtils.equals)(\n              aEntry[0],\n              bEntry[0],\n              filteredCustomTesters\n            );\n            let matchedValue = false;\n            if (matchedKey === true) {\n              matchedValue = (0, _jasmineUtils.equals)(\n                aEntry[1],\n                bEntry[1],\n                filteredCustomTesters\n              );\n            }\n            if (matchedValue === true) {\n              has = true;\n            }\n          }\n          if (has === false) {\n            allFound = false;\n            break;\n          }\n        }\n      }\n      // Remove the first value from the stack of traversed values.\n      aStack.pop();\n      bStack.pop();\n      return allFound;\n    }\n  }\n  const bIterator = b[IteratorSymbol]();\n  for (const aValue of a) {\n    const nextB = bIterator.next();\n    if (\n      nextB.done ||\n      !(0, _jasmineUtils.equals)(aValue, nextB.value, filteredCustomTesters)\n    ) {\n      return false;\n    }\n  }\n  if (!bIterator.next().done) {\n    return false;\n  }\n  if (\n    !(0, _immutableUtils.isImmutableList)(a) &&\n    !(0, _immutableUtils.isImmutableOrderedKeyed)(a) &&\n    !(0, _immutableUtils.isImmutableOrderedSet)(a) &&\n    !(0, _immutableUtils.isImmutableRecord)(a)\n  ) {\n    const aEntries = Object.entries(a);\n    const bEntries = Object.entries(b);\n    if (!(0, _jasmineUtils.equals)(aEntries, bEntries)) {\n      return false;\n    }\n  }\n\n  // Remove the first value from the stack of traversed values.\n  aStack.pop();\n  bStack.pop();\n  return true;\n};\nexports.iterableEquality = iterableEquality;\nconst isObject = a => a !== null && typeof a === 'object';\nconst isObjectWithKeys = a =>\n  isObject(a) &&\n  !(a instanceof Error) &&\n  !(a instanceof Array) &&\n  !(a instanceof Date);\nconst subsetEquality = (object, subset, customTesters = []) => {\n  const filteredCustomTesters = customTesters.filter(t => t !== subsetEquality);\n\n  // subsetEquality needs to keep track of the references\n  // it has already visited to avoid infinite loops in case\n  // there are circular references in the subset passed to it.\n  const subsetEqualityWithContext =\n    (seenReferences = new WeakMap()) =>\n    (object, subset) => {\n      if (!isObjectWithKeys(subset)) {\n        return undefined;\n      }\n      return getObjectKeys(subset).every(key => {\n        if (isObjectWithKeys(subset[key])) {\n          if (seenReferences.has(subset[key])) {\n            return (0, _jasmineUtils.equals)(\n              object[key],\n              subset[key],\n              filteredCustomTesters\n            );\n          }\n          seenReferences.set(subset[key], true);\n        }\n        const result =\n          object != null &&\n          hasPropertyInObject(object, key) &&\n          (0, _jasmineUtils.equals)(object[key], subset[key], [\n            ...filteredCustomTesters,\n            subsetEqualityWithContext(seenReferences)\n          ]);\n        // The main goal of using seenReference is to avoid circular node on tree.\n        // It will only happen within a parent and its child, not a node and nodes next to it (same level)\n        // We should keep the reference for a parent and its child only\n        // Thus we should delete the reference immediately so that it doesn't interfere\n        // other nodes within the same level on tree.\n        seenReferences.delete(subset[key]);\n        return result;\n      });\n    };\n  return subsetEqualityWithContext()(object, subset);\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexports.subsetEquality = subsetEquality;\nconst typeEquality = (a, b) => {\n  if (\n    a == null ||\n    b == null ||\n    a.constructor === b.constructor ||\n    // Since Jest globals are different from Node globals,\n    // constructors are different even between arrays when comparing properties of mock objects.\n    // Both of them should be able to compare correctly when they are array-to-array.\n    // https://github.com/facebook/jest/issues/2549\n    (Array.isArray(a) && Array.isArray(b))\n  ) {\n    return undefined;\n  }\n  return false;\n};\nexports.typeEquality = typeEquality;\nconst arrayBufferEquality = (a, b) => {\n  if (!(a instanceof ArrayBuffer) || !(b instanceof ArrayBuffer)) {\n    return undefined;\n  }\n  const dataViewA = new DataView(a);\n  const dataViewB = new DataView(b);\n\n  // Buffers are not equal when they do not have the same byte length\n  if (dataViewA.byteLength !== dataViewB.byteLength) {\n    return false;\n  }\n\n  // Check if every byte value is equal to each other\n  for (let i = 0; i < dataViewA.byteLength; i++) {\n    if (dataViewA.getUint8(i) !== dataViewB.getUint8(i)) {\n      return false;\n    }\n  }\n  return true;\n};\nexports.arrayBufferEquality = arrayBufferEquality;\nconst sparseArrayEquality = (a, b, customTesters = []) => {\n  if (!Array.isArray(a) || !Array.isArray(b)) {\n    return undefined;\n  }\n\n  // A sparse array [, , 1] will have keys [\"2\"] whereas [undefined, undefined, 1] will have keys [\"0\", \"1\", \"2\"]\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  return (\n    (0, _jasmineUtils.equals)(\n      a,\n      b,\n      customTesters.filter(t => t !== sparseArrayEquality),\n      true\n    ) && (0, _jasmineUtils.equals)(aKeys, bKeys)\n  );\n};\nexports.sparseArrayEquality = sparseArrayEquality;\nconst partition = (items, predicate) => {\n  const result = [[], []];\n  items.forEach(item => result[predicate(item) ? 0 : 1].push(item));\n  return result;\n};\nexports.partition = partition;\nconst pathAsArray = propertyPath => {\n  const properties = [];\n  if (propertyPath === '') {\n    properties.push('');\n    return properties;\n  }\n\n  // will match everything that's not a dot or a bracket, and \"\" for consecutive dots.\n  const pattern = RegExp('[^.[\\\\]]+|(?=(?:\\\\.)(?:\\\\.|$))', 'g');\n\n  // Because the regex won't match a dot in the beginning of the path, if present.\n  if (propertyPath[0] === '.') {\n    properties.push('');\n  }\n  propertyPath.replace(pattern, match => {\n    properties.push(match);\n    return match;\n  });\n  return properties;\n};\n\n// Copied from https://github.com/graingert/angular.js/blob/a43574052e9775cbc1d7dd8a086752c979b0f020/src/Angular.js#L685-L693\nexports.pathAsArray = pathAsArray;\nconst isError = value => {\n  switch (Object.prototype.toString.call(value)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return value instanceof Error;\n  }\n};\nexports.isError = isError;\nfunction emptyObject(obj) {\n  return obj && typeof obj === 'object' ? !Object.keys(obj).length : false;\n}\nconst MULTILINE_REGEXP = /[\\r\\n]/;\nconst isOneline = (expected, received) =>\n  typeof expected === 'string' &&\n  typeof received === 'string' &&\n  (!MULTILINE_REGEXP.test(expected) || !MULTILINE_REGEXP.test(received));\nexports.isOneline = isOneline;\n","\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.isImmutableList = isImmutableList;\nexports.isImmutableOrderedKeyed = isImmutableOrderedKeyed;\nexports.isImmutableOrderedSet = isImmutableOrderedSet;\nexports.isImmutableRecord = isImmutableRecord;\nexports.isImmutableUnorderedKeyed = isImmutableUnorderedKeyed;\nexports.isImmutableUnorderedSet = isImmutableUnorderedSet;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// SENTINEL constants are from https://github.com/immutable-js/immutable-js/tree/main/src/predicates\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';\nfunction isObjectLiteral(source) {\n  return source != null && typeof source === 'object' && !Array.isArray(source);\n}\nfunction isImmutableUnorderedKeyed(source) {\n  return Boolean(\n    source &&\n      isObjectLiteral(source) &&\n      source[IS_KEYED_SENTINEL] &&\n      !source[IS_ORDERED_SENTINEL]\n  );\n}\nfunction isImmutableUnorderedSet(source) {\n  return Boolean(\n    source &&\n      isObjectLiteral(source) &&\n      source[IS_SET_SENTINEL] &&\n      !source[IS_ORDERED_SENTINEL]\n  );\n}\nfunction isImmutableList(source) {\n  return Boolean(source && isObjectLiteral(source) && source[IS_LIST_SENTINEL]);\n}\nfunction isImmutableOrderedKeyed(source) {\n  return Boolean(\n    source &&\n      isObjectLiteral(source) &&\n      source[IS_KEYED_SENTINEL] &&\n      source[IS_ORDERED_SENTINEL]\n  );\n}\nfunction isImmutableOrderedSet(source) {\n  return Boolean(\n    source &&\n      isObjectLiteral(source) &&\n      source[IS_SET_SENTINEL] &&\n      source[IS_ORDERED_SENTINEL]\n  );\n}\nfunction isImmutableRecord(source) {\n  return Boolean(source && isObjectLiteral(source) && source[IS_RECORD_SYMBOL]);\n}\n"]}